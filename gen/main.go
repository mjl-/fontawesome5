package main

import (
	"log"
	"os"
	"fmt"
	"strconv"
	"strings"
	"encoding/json"
	"sort"
)

func check(err error, msg string) {
	if err != nil {
		log.Fatalf("%s: %s\n", msg, err)
	}
}

func main() {
	type Icon struct {
		Unicode string
	}
	var icons map[string]Icon
	err := json.NewDecoder(os.Stdin).Decode(&icons)
	check(err, "decoding icons JSON")
	fmt.Printf(`
//generate: go run gen/main.go < fontawesome-free/advanced-options/metadata/icons.json | gofmt > fontawesome5.go
//
// WARNING: this file was generated by "go generate". download a fontawesome5, rename it "fontawesome-free" in this directory, and generate again for updates.

package fontawesome5

var (
`)
	type Var struct {
		Name string
		Rune rune
	}
	var l []Var
	for name, icon := range icons {
		name = strings.Replace(name, "-", " ", -1)
		name = strings.Title(name)
		name = strings.Replace(name, " ", "", -1)
		if name == "" {
			log.Fatal("empty name")
		}
		if name[0] >= '0' && name[0] <= '9' {
			name = "A" + name
		}
		v, err := strconv.ParseInt(icon.Unicode, 16, 64)
		check(err, "parsing unicode")
		l = append(l, Var{name, rune(v)})
	}
	sort.Slice(l, func(i, j int) bool {
		return l[i].Name < l[j].Name
	})
	for _, icon := range l {
		fmt.Printf("\t%s = '%c'\n", icon.Name, icon.Rune)
	}
	fmt.Printf(")\n")
}
